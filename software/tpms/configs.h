// #define SHOWDEBUGINFO 1
// #define SPECIFIC_IDS_ONLY 1

// Retrieve stored PSI HIGH and LOW warn values
byte storedHighFL = EEPROM.read( 0 );
byte storedHighFR = EEPROM.read( 1 );
byte storedHighRL = EEPROM.read( 2 );
byte storedHighRR = EEPROM.read( 3 );
byte storedHighS = EEPROM.read( 4 );

byte storedLowFL = EEPROM.read( 5 );
byte storedLowFR = EEPROM.read( 6 );
byte storedLowRL = EEPROM.read( 7 );
byte storedLowRR = EEPROM.read( 8 );
byte storedLowS = EEPROM.read( 9 );

// Retrieve current Sensor ID assignments
byte storedIDFL = EEPROM.read( 10 );
byte storedIDFR = EEPROM.read( 11 );
byte storedIDRL = EEPROM.read( 12 );
byte storedIDRR = EEPROM.read( 13 );
byte storedIDS = EEPROM.read( 14 );

// Use stored values or defaults
byte highFL = ( storedHighFL != 255 ) ? storedHighFL : 40;
byte highFR = ( storedHighFR != 255 ) ? storedHighFR : 40;
byte highRL = ( storedHighRL != 255 ) ? storedHighRL : 40;
byte highRR = ( storedHighRR != 255 ) ? storedHighRR : 40;
byte highS = ( storedHighS != 255 ) ? storedHighS : 40;

byte lowFL = ( storedLowFL != 255 ) ? storedLowFL : 20;
byte lowFR = ( storedLowFR != 255 ) ? storedLowFR : 20;
byte lowRL = ( storedLowRL != 255 ) ? storedLowRL : 20;
byte lowRR = ( storedLowRR != 255 ) ? storedLowRR : 20;
byte lowS = ( storedLowS != 255 ) ? storedLowS : 20;

byte FLID = ( storedIDFL != 255 ) ? storedIDFL : 0;
byte FRID = ( storedIDFR != 255 ) ? storedIDFR : 1;
byte RLID = ( storedIDRL != 255 ) ? storedIDRL : 2;
byte RRID = ( storedIDRR != 255 ) ? storedIDRR : 3;
byte SID = ( storedIDS != 255 ) ? storedIDS : 4;

float PressureLowLimits[]
{
	lowFL, lowFR,
	lowRL, lowRR,
	lowS
};

float PressureHighLimits[]
{
	highFL, highFR,
	highRL, highRR,
	highS
};

// Known TPMS sensor hexadecimal IDs
unsigned long sensorIDs[]{
	0x14AC091,
	0x1431415,
	0x14DB9BF,
	0x1430FDD,
	0x147F886
};

// Pressure calibration offsets
float pressureOffsets[]{
	0,
	0,
	0,
	0,
	0
};
int storedIDMap[]{ FLID, FRID, RLID, RRID, SID };
int sensorIDMap[]{ FLID, FRID, RLID, RRID, SID };

// Installed TPMS sensor hexadecimal IDs
// #define FRONT_LEFT   0xC7F091C
// #define FRONT_RIGHT  0xCCAF878
// #define REAR_LEFT    0xC84EE64
// #define REAR_RIGHT   0xCBF5ED8
// #define SPARE        0xCB5D2A8

// Radio configs
#define EXPECTEDbitCount 72
#define EXPECTEDBYTECOUNT 9
#define SYNCBITS 11

#define CDWIDTH_MIN 7000
#define CDWIDTH_MAX 10500

#define SHORTTIMING_MIN 40
#define SHORTTIMING_NOM 50
#define SHORTTIMING_MAX 79
#define LONGTIMING_MIN 80
#define LONGTIMING_MAX 120
#define SYNCTIMING_MIN 175
#define SYNCTIMING_MAX 1200

#define ENDTIMING_MIN  0
#define ENDTIMING_MAX  0

// Carrier frequency = 433.919830 MHz
#define CC1101_DEFVAL_FREQ2 0x10 // Frequency Control Word, High Byte
#define CC1101_DEFVAL_FREQ1 0xB0 // Frequency Control Word, Middle Byte
#define CC1101_DEFVAL_FREQ0 0x71 // Frequency Control Word, Low Byte

#define CC1101_DEFVAL_DEVIATN 0x40 // Modem Deviation Setting (+/-25.390625kHz)

#define CC1101_DEFVAL_MDMCFG4 0x59 // Modem Configuration (59 = data rate = 20kHz - actual data rate is 10kHz but due to bi-phase coding need to double the rate, RX bandwidth 325kHz)
#define CC1101_DEFVAL_MDMCFG3 0x93 // Modem Configuration (now 93 = data rate = 20kHz)
#define CC1101_DEFVAL_MDMCFG2 0x10 // Modem Configuration (GFSK, No Sync or Manchester coding)
#define CC1101_DEFVAL_MDMCFG1 0x21 // Modem Configuration Channel spacing 100kHz
#define CC1101_DEFVAL_MDMCFG0 0xF8 // Modem Configuration
#define CC1101_DEFVAL_AGCCTRL2 0x87 // AGC Control
#define CC1101_DEFVAL_AGCCTRL1 0x58 // AGC Control
#define CC1101_DEFVAL_AGCCTRL0 0x80 // AGC Control

#define USE_HW_CD 1
// #define IGNORECHECKSUMERRORS 1
#define ENABLE_PRESSURE_ALARMS 1
#define SHOWVALIDTPMS 1
#define ALWAYSSHOWTIMINGS 1
#define I2C_ADDRESS 0x3C
#define LED_OFF HIGH
#define LED_ON LOW
#define TPMS_TIMEOUT ( 15 * 60 * 1000 ) // 15 minutes
#define CAL_PERIOD_MS ( 60 * 60 * 1000 ) // 60 minutes
#define TIRE_COUNT 5
#define PSI2BAR 14.504
#define BITISLONG 1
#define BITISSHORT 0
#define BITISSYNC 2
#define BITISUNDEFINED -1

// hardware pin configuration
#define PROC_TYPE "Seeeduino Xiao"
const int RXPin = 1; // must be an ext interrupt pin
const int CDPin = 0; // if wired, define 'USE_HW_CD' above, otherwise CD pin status is received over SPI
const int CC1101_CS = 2; // Define the Chip Select pin
const int DEBUGPIN = 12; // use the TX LED pin
const int LED_RX = LED_BUILTIN;
const int MAXBITS = 1000;
const int MAXTIMINGS = 900;

// sensor reading and decoding
volatile static unsigned long lastEdgeTimeMicros = 0;
volatile static bool validBlock = false;
volatile static bool waitingForFirstEdge = true;
volatile unsigned int Timings[ MAXTIMINGS + 1 ];
volatile bool firstEdgeIsHighToLow;
volatile unsigned int timingsIndex = 0;
unsigned int checkIndex = 0;
bool syncFound = false;
unsigned long cdWidth;
int startDataIndex = 0;
byte TPMSChangeBits = 0;
bool incomingBits[ MAXBITS ];
unsigned int bitIndex = 0;
unsigned int bitCount = 0;
int valueRSSI;
unsigned int freqOffsetAcc = 0;
unsigned long lastCalibrationTime;
byte receivedBytes[ 20 ];  // holds the raw incoming databytes from the CC1101 serial port
int receivedBytesCount;

bool hasTPMSChanged = false;
bool isPressureOutOfLimit = false;

// Function Declataions
extern bool validateTimings();
extern int receiveMessage();
extern void decodeTPMS();

// CRCTable
const byte PROGMEM CRC8_Poly_07_crctable2[] ={
	0x00, 0x07, 0x0E, 0x09, 0x1C, 0x1B, 0x12, 0x15, 0x38, 0x3F, 0x36, 0x31, 0x24, 0x23, 0x2A, 0x2D,
	0x70, 0x77, 0x7E, 0x79, 0x6C, 0x6B, 0x62, 0x65, 0x48, 0x4F, 0x46, 0x41, 0x54, 0x53, 0x5A, 0x5D,
	0xE0, 0xE7, 0xEE, 0xE9, 0xFC, 0xFB, 0xF2, 0xF5, 0xD8, 0xDF, 0xD6, 0xD1, 0xC4, 0xC3, 0xCA, 0xCD,
	0x90, 0x97, 0x9E, 0x99, 0x8C, 0x8B, 0x82, 0x85, 0xA8, 0xAF, 0xA6, 0xA1, 0xB4, 0xB3, 0xBA, 0xBD,
	0xC7, 0xC0, 0xC9, 0xCE, 0xDB, 0xDC, 0xD5, 0xD2, 0xFF, 0xF8, 0xF1, 0xF6, 0xE3, 0xE4, 0xED, 0xEA,
	0xB7, 0xB0, 0xB9, 0xBE, 0xAB, 0xAC, 0xA5, 0xA2, 0x8F, 0x88, 0x81, 0x86, 0x93, 0x94, 0x9D, 0x9A,
	0x27, 0x20, 0x29, 0x2E, 0x3B, 0x3C, 0x35, 0x32, 0x1F, 0x18, 0x11, 0x16, 0x03, 0x04, 0x0D, 0x0A,
	0x57, 0x50, 0x59, 0x5E, 0x4B, 0x4C, 0x45, 0x42, 0x6F, 0x68, 0x61, 0x66, 0x73, 0x74, 0x7D, 0x7A,
	0x89, 0x8E, 0x87, 0x80, 0x95, 0x92, 0x9B, 0x9C, 0xB1, 0xB6, 0xBF, 0xB8, 0xAD, 0xAA, 0xA3, 0xA4,
	0xF9, 0xFE, 0xF7, 0xF0, 0xE5, 0xE2, 0xEB, 0xEC, 0xC1, 0xC6, 0xCF, 0xC8, 0xDD, 0xDA, 0xD3, 0xD4,
	0x69, 0x6E, 0x67, 0x60, 0x75, 0x72, 0x7B, 0x7C, 0x51, 0x56, 0x5F, 0x58, 0x4D, 0x4A, 0x43, 0x44,
	0x19, 0x1E, 0x17, 0x10, 0x05, 0x02, 0x0B, 0x0C, 0x21, 0x26, 0x2F, 0x28, 0x3D, 0x3A, 0x33, 0x34,
	0x4E, 0x49, 0x40, 0x47, 0x52, 0x55, 0x5C, 0x5B, 0x76, 0x71, 0x78, 0x7F, 0x6A, 0x6D, 0x64, 0x63,
	0x3E, 0x39, 0x30, 0x37, 0x22, 0x25, 0x2C, 0x2B, 0x06, 0x01, 0x08, 0x0F, 0x1A, 0x1D, 0x14, 0x13,
	0xAE, 0xA9, 0xA0, 0xA7, 0xB2, 0xB5, 0xBC, 0xBB, 0x96, 0x91, 0x98, 0x9F, 0x8A, 0x8D, 0x84, 0x83,
	0xDE, 0xD9, 0xD0, 0xD7, 0xC2, 0xC5, 0xCC, 0xCB, 0xE6, 0xE1, 0xE8, 0xEF, 0xFA, 0xFD, 0xF4, 0xF3
};

const byte PROGMEM CRC8_Poly_13_crctable2[] = {
	0x00, 0x13, 0x26, 0x35, 0x4C, 0x5F, 0x6A, 0x79, 0x98, 0x8B, 0xBE, 0xAD, 0xD4, 0xC7, 0xF2, 0xE1,
	0x23, 0x30, 0x05, 0x16, 0x6F, 0x7C, 0x49, 0x5A, 0xBB, 0xA8, 0x9D, 0x8E, 0xF7, 0xE4, 0xD1, 0xC2,
	0x46, 0x55, 0x60, 0x73, 0x0A, 0x19, 0x2C, 0x3F, 0xDE, 0xCD, 0xF8, 0xEB, 0x92, 0x81, 0xB4, 0xA7,
	0x65, 0x76, 0x43, 0x50, 0x29, 0x3A, 0x0F, 0x1C, 0xFD, 0xEE, 0xDB, 0xC8, 0xB1, 0xA2, 0x97, 0x84,
	0x8C, 0x9F, 0xAA, 0xB9, 0xC0, 0xD3, 0xE6, 0xF5, 0x14, 0x07, 0x32, 0x21, 0x58, 0x4B, 0x7E, 0x6D,
	0xAF, 0xBC, 0x89, 0x9A, 0xE3, 0xF0, 0xC5, 0xD6, 0x37, 0x24, 0x11, 0x02, 0x7B, 0x68, 0x5D, 0x4E,
	0xCA, 0xD9, 0xEC, 0xFF, 0x86, 0x95, 0xA0, 0xB3, 0x52, 0x41, 0x74, 0x67, 0x1E, 0x0D, 0x38, 0x2B,
	0xE9, 0xFA, 0xCF, 0xDC, 0xA5, 0xB6, 0x83, 0x90, 0x71, 0x62, 0x57, 0x44, 0x3D, 0x2E, 0x1B, 0x08,
	0x0B, 0x18, 0x2D, 0x3E, 0x47, 0x54, 0x61, 0x72, 0x93, 0x80, 0xB5, 0xA6, 0xDF, 0xCC, 0xF9, 0xEA,
	0x28, 0x3B, 0x0E, 0x1D, 0x64, 0x77, 0x42, 0x51, 0xB0, 0xA3, 0x96, 0x85, 0xFC, 0xEF, 0xDA, 0xC9,
	0x4D, 0x5E, 0x6B, 0x78, 0x01, 0x12, 0x27, 0x34, 0xD5, 0xC6, 0xF3, 0xE0, 0x99, 0x8A, 0xBF, 0xAC,
	0x6E, 0x7D, 0x48, 0x5B, 0x22, 0x31, 0x04, 0x17, 0xF6, 0xE5, 0xD0, 0xC3, 0xBA, 0xA9, 0x9C, 0x8F,
	0x87, 0x94, 0xA1, 0xB2, 0xCB, 0xD8, 0xED, 0xFE, 0x1F, 0x0C, 0x39, 0x2A, 0x53, 0x40, 0x75, 0x66,
	0xA4, 0xB7, 0x82, 0x91, 0xE8, 0xFB, 0xCE, 0xDD, 0x3C, 0x2F, 0x1A, 0x09, 0x70, 0x63, 0x56, 0x45,
	0xC1, 0xD2, 0xE7, 0xF4, 0x8D, 0x9E, 0xAB, 0xB8, 0x59, 0x4A, 0x7F, 0x6C, 0x15, 0x06, 0x33, 0x20,
	0xE2, 0xF1, 0xC4, 0xD7, 0xAE, 0xBD, 0x88, 0x9B, 0x7A, 0x69, 0x5C, 0x4F, 0x36, 0x25, 0x10, 0x03
};

struct TPMS_entry {
	unsigned long TPMS_ID;
	unsigned long lastupdated;
	unsigned int TPMS_Status;
	double TPMS_Pressure;
	float TPMS_Temperature;
	float TPMS_LowPressureLimit;
	float TPMS_HighPressureLimit;
	boolean LowPressure;
	boolean HighPressure;
	int RSSIdBm;
	boolean AudibleAlarmActive;
} TPMS[TIRE_COUNT];

enum RXStates {
	Waiting_Byte33 = 0,
	Got_Byte33,
	Got_Byte55,
	Got_Byte53,
	Manch1,
	Manch2
};
